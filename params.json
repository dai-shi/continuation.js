{"name":"continuation.js","tagline":"A module for tail call optimization by Continuation Passing Style (CPS) transformation with trampoline technique for Node.js","body":"continuation.js\r\n===============\r\n\r\nA module for tail call optimization by Continuation Passing Style (CPS)\r\ntransformation with trampoline technique for Node.js\r\n\r\nJavaScript is a nice programming language, but compared to Scheme,\r\nit doesn't handle tail calls properly.\r\nNode.js is often used with callback functions,\r\nwhich tend to be tail calls (but not necessarily recursions)\r\nconsuming call stacks.\r\n\r\nThis module allows to transform native JavaScript code into\r\nCPS code in a best effort manner.\r\nIt utilizes so-called trampoline technique to avoid a stack overflow error.\r\nTransforming all functions into CPS is not very easy\r\n(and sometimes not very efficient),\r\nhence it has a fallback mechanism, that is, only supported\r\nfunction style is transformed into CPS and other functions are\r\ncalled in an original style.\r\nBecause of the fallback mechanism, mixing CPS code and non-CPS code\r\nis possible.\r\n\r\nComparison\r\n----------\r\n\r\nHere is the table showing modules that support tail call optimization.\r\n\r\n<table>\r\n<tr>\r\n<th>NAME</th>\r\n<th>continuation.js</th>\r\n<th><a href=\"https://github.com/pufuwozu/brushtail\">Brushtail</a></th>\r\n<th><a href=\"https://github.com/natefaubion/tailrec.js\">tailrec.js</a></th>\r\n<th><a href=\"https://github.com/jayferd/thunk.js\">thunk.js</a></th>\r\n<th><a href=\"https://github.com/Gozala/js-tail-call\">tail-call</a></th>\r\n<th><a href=\"http://glat.info/jscheck/tomrec.xhtml\">tailopt.js</a></th>\r\n</tr>\r\n<tr>\r\n<td>Tail call optimization</td>\r\n<td>Yes</td>\r\n<td>Yes</td>\r\n<td>Yes</td>\r\n<td>Yes</td>\r\n<td>Yes</td>\r\n<td>Yes</td>\r\n</tr>\r\n<tr>\r\n<td>Mutual recursion</td>\r\n<td>Yes</td>\r\n<td>No</td>\r\n<td>No</td>\r\n<td>Yes</td>\r\n<td>No</td>\r\n<td>Yes</td>\r\n</tr>\r\n<tr>\r\n<td>Native JavaScript</td>\r\n<td>Yes</td>\r\n<td>Yes</td>\r\n<td>No</td>\r\n<td>No</td>\r\n<td>More or less</td>\r\n<td>More or less</td>\r\n</tr>\r\n<tr>\r\n<td><code>require()</code> integration</td>\r\n<td>Yes</td>\r\n<td>No</td>\r\n<td>No</td>\r\n<td>No</td>\r\n<td>No</td>\r\n<td>No</td>\r\n</tr>\r\n</table>\r\n\r\nHow to use\r\n----------\r\n\r\n### GitHub\r\n\r\n    % git clone https://github.com/dai-shi/continuation.js.git\r\n    % cd continuation.js\r\n    % ./bin/continuation-compile sample/fact.js > cps_fact.js\r\n\r\n### NPM\r\n\r\n    % npm install continuation.js\r\n\r\nand add the following:\r\n\r\n    require('continuation.js').enable_on_require();\r\n\r\nwhich transforms all following .js files by `require`.\r\n\r\nExamples\r\n--------\r\n\r\nSimple factorial function:\r\n\r\n    % cat sample/fact.js\r\n    function fact(x) {\r\n      function fact_tail(x, r) {\r\n        if (x === 0) {\r\n          return r;\r\n        } else {\r\n          return fact_tail(x - 1, x * r);\r\n        }\r\n      }\r\n      return fact_tail(x, 1);\r\n    }\r\n\r\n    exports.fact = fact;\r\n\r\n    % node -e \"console.log(require('./sample/fact.js').fact(100000))\"\r\n    \r\n    .../continuation.js/sample/fact.js:2\r\n      function fact_tail(x, r) {\r\n                            ^\r\n    RangeError: Maximum call stack size exceeded\r\n    \r\n    % node -e \"require('./lib/continuation.js').enable_on_require();console.log(require('./sample/fact.js').fact(100000))\"\r\n    Infinity\r\n\r\nMutual recursion example:\r\n\r\n    % cat sample/mutual.js\r\n    function isEven(x) {\r\n      if (x === 0) {\r\n        return true;\r\n      } else {\r\n        return isOdd(x - 1);\r\n      }\r\n    }\r\n\r\n    function isOdd(x) {\r\n      if (x === 0) {\r\n        return false;\r\n      } else {\r\n        return isEven(x - 1);\r\n      }\r\n    }\r\n\r\n    exports.isEven = isEven;\r\n    exports.isOdd = isOdd;\r\n\r\n    % node -e \"console.log(require('./sample/mutual.js').isOdd(1234567))\"\r\n\r\n    .../sample/mutual.js:1\r\n    tion isEven(x) {\r\n           ^\r\n    RangeError: Maximum call stack size exceeded\r\n    % node -e \"require('./lib/continuation.js').enable_on_require();console.log(require('./sample/mutual.js').isOdd(1234567))\"\r\n    true\r\n\r\nHow it works\r\n------------\r\n\r\n* 4 classes are defined in the global scope.\r\n    * CpsFunction\r\n    * CpsContinuation\r\n    * CpsResult\r\n    * CpsRun\r\n* CPS enabled functions have the CpsEnabled=true property.\r\n* Traversing AST to transform into CPS in a best effort manner.\r\n* Keeping original code so that non-CPS is always possible.\r\n\r\nBenchmark results\r\n-----------------\r\n\r\nThe following is the results of Octane benchmark suites (except for one).\r\n\r\n<table>\r\n<tr>\r\n<th>Suite name</th>\r\n<th>Original</th>\r\n<th>CPS transformed</th>\r\n</tr>\r\n\r\n<tr>\r\n<td>Richards.Richards</td>\r\n<td>364 ops/sec</td>\r\n<td>28.14 ops/sec</td>\r\n</tr>\r\n<tr>\r\n<td>DeltaBlue.DeltaBlue</td>\r\n<td>181 ops/sec</td>\r\n<td>23.87 ops/sec</td>\r\n</tr>\r\n<tr>\r\n<td>Crypto.Encrypt</td>\r\n<td>172 ops/sec</td>\r\n<td>160 ops/sec</td>\r\n</tr>\r\n<tr>\r\n<td>Crypto.Decrypt</td>\r\n<td>9.08 ops/sec</td>\r\n<td>8.52 ops/sec</td>\r\n</tr>\r\n<tr>\r\n<td>RayTrace.RayTrace</td>\r\n<td>18.54 ops/sec</td>\r\n<td>5.21 ops/sec</td>\r\n</tr>\r\n<tr>\r\n<td>EarleyBoyer.Earley</td>\r\n<td>280 ops/sec</td>\r\n<td>71.44 ops/sec</td>\r\n</tr>\r\n<tr>\r\n<td>EarleyBoyer.Boyer</td>\r\n<td>18.86 ops/sec</td>\r\n<td>4.53 ops/sec</td>\r\n</tr>\r\n<tr>\r\n<td>RegExp.RegExp</td>\r\n<td>7.11 ops/sec</td>\r\n<td>7.13 ops/sec</td>\r\n</tr>\r\n<tr>\r\n<td>Splay.Splay</td>\r\n<td>121 ops/sec</td>\r\n<td>110 ops/sec</td>\r\n</tr>\r\n<tr>\r\n<td>NavierStokes.NavierStokes</td>\r\n<td>3.61 ops/sec</td>\r\n<td>2.89 ops/sec</td>\r\n</tr>\r\n<tr>\r\n<td>PdfJS.PdfJS</td>\r\n<td>2.85 ops/sec</td>\r\n<td>2.83 ops/sec</td>\r\n</tr>\r\n<tr>\r\n<td>Gameboy.Gameboy</td>\r\n<td>1.08 ops/sec</td>\r\n<td>0.59 ops/sec</td>\r\n</tr>\r\n<tr>\r\n<td>CodeLoad.CodeLoadClosure</td>\r\n<td>382 ops/sec</td>\r\n<td>368 ops/sec</td>\r\n</tr>\r\n<tr>\r\n<td>CodeLoad.CodeLoadJQuery</td>\r\n<td>10.01 ops/sec</td>\r\n<td>11.12 ops/sec</td>\r\n</tr>\r\n<tr>\r\n<td>Box2D.Box2D</td>\r\n<td>2.53 ops/sec</td>\r\n<td>2.55 ops/sec</td>\r\n</tr>\r\n\r\n</table>\r\n\r\nSince trampoline is costly,\r\nperformance drops in most suites especially basic ones.\r\nWhereas in relatively complex suites, there are some cases\r\nwhen performance is comparable.\r\n\r\nTODOs\r\n-----\r\n\r\n* Work with try...catch and throw.\r\n* Transform simple non-tail recursive calls into CPS.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}